name: CI - Backend & Frontend Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend tests (with Postgres & Redis)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: tools_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test" --health-interval 10s --health-timeout 5s --health-retries 10
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust registry and cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Install clients for health checks
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client redis-tools

      - name: Wait for services
        run: |
          echo "Waiting for Postgres via psql..."
          export PGPASSWORD=test
          for i in $(seq 1 60); do
            if psql -h postgres -U test -d tools_test -c '\\q' >/dev/null 2>&1; then
              echo "Postgres ready"; break
            fi
            sleep 1
          done
          echo "Waiting for Redis via redis-cli..."
          for i in $(seq 1 60); do
            if redis-cli -h redis -p 6379 ping >/dev/null 2>&1; then
              echo "Redis ready"; break
            fi
            sleep 1
          done

      - name: Run backend tests
        working-directory: backend
        env:
          TEST_DATABASE_URL: postgres://test:test@postgres:5432/tools_test
          REDIS_URL: redis://redis:6379/
        run: |
          cargo test --all-features -- --nocapture

  frontend-tests:
    name: Frontend tests (Vitest)
    runs-on: ubuntu-latest
    needs: []

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm test
name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run backend and frontend tests (with Postgres & Redis)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: tools_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test" --health-interval 10s --health-timeout 5s --health-retries 10
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust registry and cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Wait for services
        run: |
          echo "Waiting for Postgres (postgres:5432)..."
          for i in $(seq 1 60); do
            if (echo > /dev/tcp/postgres/5432) >/dev/null 2>&1; then
              echo "Postgres reachable"; break
            fi
            sleep 1
          done
          echo "Waiting for Redis (redis:6379)..."
          for i in $(seq 1 60); do
            if (echo > /dev/tcp/redis/6379) >/dev/null 2>&1; then
              echo "Redis reachable"; break
            fi
            sleep 1
          done

      - name: Run backend tests (integration + unit)
        working-directory: backend
        env:
          TEST_DATABASE_URL: postgres://test:test@postgres:5432/tools_test
          REDIS_URL: redis://redis:6379/
        run: |
          cargo test --all-features -- --nocapture

      - name: Run frontend tests
        working-directory: frontend
        run: |
          npm ci
          npm test
name: Integration Tests & Build

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: read
  packages: write

jobs:
  integration:
    name: Full tests (runs only after CI smoke succeeds)
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: tools
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: tools
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U tools -d tools" --health-interval 5s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 5s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set environment
        run: |
          echo "TEST_DATABASE_URL=postgres://tools:pass@localhost:5432/tools" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV

      - name: Run backend integration tests
        run: |
          cd backend
          cargo test --workspace --all-features --no-fail-fast

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install and build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build --if-present

      - name: Package build artifacts (zip)
        run: |
          mkdir -p artifacts
          cp backend/target/release/tools-backend artifacts/ || true
          cp -r frontend/out artifacts/frontend-out || true
          cd artifacts
          zip -r ../build-artifacts.zip . || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-zip
          path: build-artifacts.zip

  automerge-dependabot:
    name: Auto-merge Dependabot PRs on success
    runs-on: ubuntu-latest
    needs: integration
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Enable auto-merge for Dependabot minor/patch PRs
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner
            const repo = context.repo.repo
            const sha = context.payload.workflow_run.head_sha

            // list PRs for the commit
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({ owner, repo, commit_sha: sha })
            core.info(`Found ${prs.length} PR(s) associated with commit ${sha}`)

            function semverDiff(a, b) {
              const pa = a.split('.').map(n=>parseInt(n||'0'))
              const pb = b.split('.').map(n=>parseInt(n||'0'))
              if (pa[0] !== pb[0]) return 'major'
              if (pa[1] !== pb[1]) return 'minor'
              if (pa[2] !== pb[2]) return 'patch'
              return 'none'
            }

            for (const pr of prs) {
              const author = pr.user && pr.user.login || ''
              if (!author.startsWith('dependabot')) {
                core.info(`Skipping PR #${pr.number} (author ${author})`)
                continue
              }

              // Try to parse versions from title "Bump X from A to B"
              const m = pr.title.match(/from\s+(\d+\.\d+\.\d+)\s+to\s+(\d+\.\d+\.\d+)/i)
              if (!m) {
                core.info(`Could not parse versions from PR #${pr.number} title: ${pr.title}`)
                continue
              }
              const from = m[1]
              const to = m[2]
              const diff = semverDiff(from, to)
              core.info(`PR #${pr.number}: version ${from} -> ${to} (${diff})`)

              if (diff === 'patch' || diff === 'minor') {
                // enable auto-merge (squash) for this PR
                try {
                  await github.request('PUT /repos/{owner}/{repo}/pulls/{pull_number}/auto-merge', {
                    owner, repo, pull_number: pr.number,
                    merge_method: 'squash'
                  })
                  core.info(`Enabled auto-merge for PR #${pr.number}`)
                } catch (err) {
                  core.info(`Failed to enable auto-merge for PR #${pr.number}: ${err}`)
                }
              } else {
                core.info(`Skipping auto-merge for PR #${pr.number} due to semver ${diff}`)
              }
            }